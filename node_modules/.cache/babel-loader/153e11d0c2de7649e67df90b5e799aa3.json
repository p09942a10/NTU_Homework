{"remainingRequest":"/Users/kevin/Kevin/Kevin's Website/Kevin's Page/node_modules/thread-loader/dist/cjs.js!/Users/kevin/Kevin/Kevin's Website/Kevin's Page/node_modules/babel-loader/lib/index.js!/Users/kevin/Kevin/Kevin's Website/Kevin's Page/src/utils/request.js","dependencies":[{"path":"/Users/kevin/Kevin/Kevin's Website/Kevin's Page/src/utils/request.js","mtime":1603001474237},{"path":"/Users/kevin/Kevin/Kevin's Website/Kevin's Page/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kevin/Kevin/Kevin's Website/Kevin's Page/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kevin/Kevin/Kevin's Website/Kevin's Page/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport { MessageBox, Message, Loading } from 'element-ui';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth'; // create an axios instance\n\nvar service = axios.create({\n  // baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url\n  baseURL: '/',\n  // withCredentials: true, // send cookies when cross-domain requests\n  // timeout: 5000 // request timeout\n  time: 8000\n}); // 全局loading動畫開啟關閉\n\nvar loading;\n\nfunction startLoading() {\n  loading = Loading.service({\n    lock: true,\n    text: 'Loading...',\n    background: 'rgba(0, 0, 0, 0.7)'\n  });\n}\n\nfunction endLoading() {\n  loading.close();\n} // request interceptor\n\n\nservice.interceptors.request.use(function (config) {\n  startLoading(); // do something before request is sent\n\n  if (store.getters.token) {\n    // let each request carry token\n    // ['MPD-Token'] is a custom headers key\n    // please modify it according to the actual situation.\n    config.headers['MPD-Token'] = getToken();\n  }\n\n  return config;\n}, function (error) {\n  // do something with request error\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\n * If you want to get http information such as headers or status\n * Please return  response => response\n */\n\n/**\n * Determine the request status by custom code\n * Here is just an example\n * You can also judge the status by HTTP Status Code\n */\nfunction (response) {\n  var res = response.data;\n  endLoading(); // if the custom code is not 200, it is judged as an error.\n\n  if (res.success === 'true') {\n    Message({\n      message: res.message || 'Success',\n      type: 'success',\n      duration: 1 * 1000\n    });\n  } else {\n    if (res.status !== '200') {\n      Message({\n        message: res.message || 'Error',\n        type: 'error',\n        duration: 5 * 1000\n      }); // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\n\n      if (res.status === '401') {\n        // to re-login\n        MessageBox.confirm('Access token invalid, you can cancel to stay on this page, or log in again', 'Confirm logout', {\n          confirmButtonText: 'Re-Login',\n          // cancelButtonText: 'Cancel',\n          showClose: false,\n          showCancelButton: false,\n          type: 'warning'\n        }).then(function () {\n          store.dispatch('user/resetToken').then(function () {\n            location.reload();\n          });\n        });\n      }\n\n      return Promise.reject(new Error(res.message || 'Error'));\n    } else {\n      Message({\n        message: res.message || 'Success',\n        type: 'success',\n        duration: 1 * 1000\n      });\n      return res;\n    }\n  }\n\n  return res;\n}, function (error) {\n  endLoading();\n  console.log('err' + error); // for debug\n\n  Message({\n    message: error.response.data.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;",null]}